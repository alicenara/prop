/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package propLlibreria.Interficie;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;

/**
 *
 * @author towerthousand
 */
public class VistaGestioEliminar extends javax.swing.JPanel {

    private String tipusObjecte;
    
    /**
     * Creates new form VistaGestioEliminar
     */
    public VistaGestioEliminar() {
        initComponents();
        tipusObjecte = "Àrea";
        addMouseActionToTaula(taulaResultats);
    }
    
    public void resetFields() {
        refillTable();
    }
    
    public void setObjectType(String newTipusObjecte) {
        tipusObjecte = newTipusObjecte;
    }

    private void refillTable() {
        PropTableModel myData = new PropTableModel();
        ArrayList<String> columns = new ArrayList<String>();
        ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
        
        switch(tipusObjecte) {
            case "Àrea": {
                columns.add("Nom Àrea");
                ArrayList<ArrayList<String> > arees = CtrlInterficie.seleccionaAllArees();
                for(int i = 0; i < arees.size(); ++i)
                    rows.add(arees.get(i));
                break;
            }
            case "Secció": {
                columns.add("Nom Secció");
                columns.add("Nom Àrea Pare");
                ArrayList<ArrayList<String> > seccions = CtrlInterficie.seleccionaAllSeccions();
                for(int i = 0; i < seccions.size(); ++i)
                    rows.add(seccions.get(i));
                break;
            }
            case "Temàtica": {
                columns.add("Nom Temàtica");
                columns.add("Nom Secció");
                columns.add("Nom Àrea");
                ArrayList<ArrayList<String> > tematiques = CtrlInterficie.seleccionaAllTematiques();
                for(int i = 0; i < tematiques.size(); ++i)
                    rows.add(tematiques.get(i));
                break;
            }
            case "Estanteria": {
                columns.add("PosicióX");
                columns.add("PosicióY");
                columns.add("Estants");
                columns.add("Llargada");
                ArrayList<ArrayList<String> > estanteries = CtrlInterficie.seleccionaAllEstanteries();
                for(int i = 0; i < estanteries.size(); ++i)
                    rows.add(estanteries.get(i));
                break;
            }
            case "Llibre": {
                columns.add("ISBN");
                columns.add("Títol");
                columns.add("Autor");
                columns.add("Any");
                columns.add("Temàtica Principal");
                ArrayList<ArrayList<String> > llibres = CtrlInterficie.seleccionaAllLlibres();
                for(int i = 0; i < llibres.size(); ++i) {
                    llibres.get(i).remove(5);
                    llibres.get(i).remove(3);
                    rows.add(llibres.get(i));
                }
                break;
            }
        }
        
        myData.setColumnsValues(columns);
        myData.setRowsValues(rows);
        taulaResultats.setModel(myData);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contenidorTaula = new javax.swing.JScrollPane();
        taulaResultats = new javax.swing.JTable();
        botoEliminar = new javax.swing.JButton();

        setBackground(new java.awt.Color(212, 220, 245));
        setMaximumSize(new java.awt.Dimension(476, 405));
        setMinimumSize(new java.awt.Dimension(476, 405));
        setPreferredSize(new java.awt.Dimension(476, 405));

        taulaResultats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        contenidorTaula.setViewportView(taulaResultats);

        botoEliminar.setText("Eliminar");
        botoEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contenidorTaula)
                    .addComponent(botoEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contenidorTaula, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botoEliminar)
                .addContainerGap(55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botoEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoEliminarActionPerformed
        try {
            switch(tipusObjecte) {
                case "Àrea": {
                    int result = JOptionPane.showConfirmDialog (null, "Segur que vols borrar aquesta àrea?\nS'eliminaràn recursivament les seves seccions i temàtiques,\naixí com els llibres que tinguin una d'aquestes temàtiques com a principal","Warning",JOptionPane.YES_NO_OPTION);
                    if(result != JOptionPane.YES_OPTION) return;
                    int[] selected = taulaResultats.getSelectedRows();
                    boolean end = false;
                    for(int i = 0; i < selected.length && !end; ++i) {
                        String s = (String)taulaResultats.getValueAt(selected[i], 0);
                        CtrlInterficie.eliminarArea(s);
                    }
                    break;
                }
                case "Secció": {
                    int result = JOptionPane.showConfirmDialog (null, "Segur que vols borrar aquesta secció?\nS'eliminaràn recursivament les seves temàtiques,\naixí com els llibres que tinguin una d'aquestes temàtiques com a principal","Warning",JOptionPane.YES_NO_OPTION);
                    if(result != JOptionPane.YES_OPTION) return;
                    int[] selected = taulaResultats.getSelectedRows();
                    boolean end = false;
                    for(int i = 0; i < selected.length && !end; ++i) {
                        String s = (String)taulaResultats.getValueAt(selected[i], 0);
                        CtrlInterficie.eliminarSeccio(s);
                    }
                    break;
                }
                case "Temàtica": {
                    int result = JOptionPane.showConfirmDialog (null, "Segur que vols borrar aquesta temàtica?\nS'eliminaràn els llibres que tinguin aquesta temàtica com a principal","Warning",JOptionPane.YES_NO_OPTION);
                    if(result != JOptionPane.YES_OPTION) return;
                    int[] selected = taulaResultats.getSelectedRows();
                    boolean end = false;
                    for(int i = 0; i < selected.length && !end; ++i) {
                        String s = (String)taulaResultats.getValueAt(selected[i], 0);
                        CtrlInterficie.eliminarTematica(s);
                    }
                    break;
                }
                case "Estanteria": {
                    int result = JOptionPane.showConfirmDialog (null, "Segur que vols esborrar aquesta estanteria?","Warning",JOptionPane.YES_NO_OPTION);
                    if(result != JOptionPane.YES_OPTION) return;
                    int[] selected = taulaResultats.getSelectedRows();
                    boolean end = false;
                    for(int i = 0; i < selected.length && !end; ++i) {
                        String s1 = (String)taulaResultats.getValueAt(selected[i], 0);
                        String s2 = (String)taulaResultats.getValueAt(selected[i], 1);
                        CtrlInterficie.eliminarEstanteria(Integer.parseInt(s1), Integer.parseInt(s2));
                    }
                    break;
                }
                case "Llibre": {
                    int result = JOptionPane.showConfirmDialog (null, "Segur que vols esborrar aquest llibre?","Warning",JOptionPane.YES_NO_OPTION);
                    if(result != JOptionPane.YES_OPTION) return;
                    int[] selected = taulaResultats.getSelectedRows();
                    boolean end = false;
                    for(int i = 0; i < selected.length && !end; ++i) {
                        String s1 = (String)taulaResultats.getValueAt(selected[i], 1);
                        String s2 = (String)taulaResultats.getValueAt(selected[i], 2);
                        String s3 = (String)taulaResultats.getValueAt(selected[i], 3);
                        CtrlInterficie.eliminarLlibre(s1, s2, Integer.parseInt(s3));
                    }
                    break;
                }
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en esborrar.\nCodi d'error: " + e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "Esborrat correctament","Info",JOptionPane.INFORMATION_MESSAGE);                
        refillTable();
    }//GEN-LAST:event_botoEliminarActionPerformed
    
    private void setVistaDadesLlibre(MouseEvent e) {
        if(!tipusObjecte.equals("Llibre")) return; 
        if (e.getClickCount() == 2) {
            Object isbn = taulaResultats.getValueAt(taulaResultats.getSelectedRow(),0);
            VistaDadesLlibre dadesLlibre = new VistaDadesLlibre((String) isbn);
            JFrame frameDadesLlibre = new JFrame();
            frameDadesLlibre.setSize(new Dimension(600,400));
            frameDadesLlibre.setIconImage(Toolkit.getDefaultToolkit().getImage("resources/bookIcon.png"));
            frameDadesLlibre.setLocation(20, 20);
            frameDadesLlibre.setResizable(false);
            frameDadesLlibre.add(dadesLlibre);
            frameDadesLlibre.setVisible(true);
        }
    }
    
    private void addMouseActionToTaula(JTable taula) {
        taula.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                setVistaDadesLlibre(e);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botoEliminar;
    private javax.swing.JScrollPane contenidorTaula;
    private javax.swing.JTable taulaResultats;
    // End of variables declaration//GEN-END:variables
}
