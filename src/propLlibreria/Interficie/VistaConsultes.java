package propLlibreria.Interficie;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import propLlibreria.Domini.CtrlDominiInterficie;
/**
 *
 * @author Ruben
 */
public class VistaConsultes extends javax.swing.JPanel {

    /**
     * Creates new form VistaConsultes
     */
    @SuppressWarnings("FieldMayBeFinal")
    
    
    public VistaConsultes() {
        initComponents();
        IntroduccioDades.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fons = new javax.swing.JPanel();
        Header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Seleccio = new javax.swing.JComboBox();
        MostraResult = new javax.swing.JScrollPane();
        funcionsSeleccio = new javax.swing.JComboBox();
        OKButton = new javax.swing.JButton();
        IntroduccioDades = new javax.swing.JTextField();

        Fons.setBackground(new java.awt.Color(204, 204, 255));
        Fons.setFont(new java.awt.Font("Arial Unicode MS", 0, 11)); // NOI18N

        Header.setBackground(new java.awt.Color(255, 255, 255));
        Header.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Header.setFocusable(false);

        jLabel1.setText("Coses de la capcelera");

        javax.swing.GroupLayout HeaderLayout = new javax.swing.GroupLayout(Header);
        Header.setLayout(HeaderLayout);
        HeaderLayout.setHorizontalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderLayout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HeaderLayout.setVerticalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderLayout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        Seleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona...", "Area", "Seccio", "Tematica", "Llibre", "Estanteria" }));
        Seleccio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccioActionPerformed(evt);
            }
        });

        MostraResult.setAutoscrolls(true);

        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta..." }));
        funcionsSeleccio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionsSeleccioActionPerformed(evt);
            }
        });

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        IntroduccioDades.setForeground(new java.awt.Color(153, 153, 153));
        IntroduccioDades.setEnabled(false);
        IntroduccioDades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntroduccioDadesActionPerformed(evt);
            }
        });
        IntroduccioDades.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                IntroduccioDadesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                IntroduccioDadesFocusLost(evt);
            }
        });
        IntroduccioDades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IntroduccioDadesKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout FonsLayout = new javax.swing.GroupLayout(Fons);
        Fons.setLayout(FonsLayout);
        FonsLayout.setHorizontalGroup(
            FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(FonsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(MostraResult, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 63, Short.MAX_VALUE))
            .addGroup(FonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Seleccio, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(funcionsSeleccio, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntroduccioDades)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKButton)
                .addGap(14, 14, 14))
        );
        FonsLayout.setVerticalGroup(
            FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FonsLayout.createSequentialGroup()
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Seleccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(funcionsSeleccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IntroduccioDades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OKButton))
                .addGap(19, 19, 19)
                .addComponent(MostraResult, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Fons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void IntroduccioDadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntroduccioDadesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IntroduccioDadesActionPerformed

    private void funcionsSeleccioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionsSeleccioActionPerformed
        // TODO add your handling code here:
        String SeleccioItem = (String) Seleccio.getModel()
        .getSelectedItem();
        String funcionsSeleccioItem = (String) funcionsSeleccio.getModel()
        .getSelectedItem();
        System.out.println(funcionsSeleccioItem);
        try {
            //TODO
            if ((SeleccioItem == null) ||("Selecciona...".equals(SeleccioItem))
                || (funcionsSeleccioItem == null) || ("Tipus consulta...".equals(funcionsSeleccioItem))
                || ("Totes arees".equals(funcionsSeleccioItem)) || ("Totes seccions".equals(funcionsSeleccioItem))
                || ("Totes tematiques".equals(funcionsSeleccioItem)) || ("Tots els llibres".equals(funcionsSeleccioItem))
                || ("Totes estanteries".equals(funcionsSeleccioItem))) {
                        IntroduccioDades.setEnabled(false);
                        IntroduccioDades.setText("");
            }
            else {
                IntroduccioDades.setEnabled(true);
                establirValorsIntroccioValors();
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_funcionsSeleccioActionPerformed

    private void SeleccioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccioActionPerformed
        // TODO add your handling code here:
        String SeleccioItem = (String) Seleccio.getModel()
        .getSelectedItem();
        try {
            switch(SeleccioItem) {
                case "Selecciona...":
                restablirOpcions();
                break;
                case "Area":
                opcionsArea();
                break;
                case "Seccio":
                opcionsSeccio();
                break;
                case "Tematica":
                opcionsTematica();
                break;
                case "Llibre":
                opcionsLlibre();
                break;
                case "Estanteria":
                opcionsEstanteria();
                break;
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_SeleccioActionPerformed
    
    private void consultaArea(String funcio) {
        try {
            System.out.println("Consulta area");
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcio) {
                case "Totes arees":
                    columns.add("Nom area");
                    myData.setColumnsValues(columns);
                    rows = CtrlInterficie.seleccionaAllArees();
                    break;
                case "Seccions d'area":
                    columns.add("Nom seccio");
                    System.out.println(IntroduccioDades.getText());
                    CtrlInterficie.consultarSeccionsArea(IntroduccioDades.getText());
                    break;
                case "Tematiques d'area":
                    columns.add("Nom tematiques");
                    CtrlInterficie.consultarTematiquesArea(IntroduccioDades.getText());
                    break;
                case "Llibres d'area":
                    columns.add("Titol");
                    columns.add("Tematica");
                    columns.add("Autor");
                    columns.add("Editorial");
                    columns.add("Titol");
                    columns.add("Any");
                    columns.add("Edicio");
                    CtrlInterficie.consultarLlibresArea(IntroduccioDades.getText());
                    break;       
            }
            myData.setColumnsValues(columns);
            myData.setRowsValues(rows);
            JTable taulaArees = new JTable((TableModel) myData);
            MostraResult.setViewportView(taulaArees);
        }
        catch (Exception e) {
            System.out.println(e.getMessage() + "1");
        }
    }
    private void consultaSeccio(String funcio) {
      try {
            System.out.println("Consulta seccio");
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcio) {
                case "Totes seccions":
                    columns.add("Nom seccio");
                    rows = CtrlInterficie.seleccionaAllSeccions();
                    System.out.println(rows.size());
                    break;
                case "Tematiques seccio" :
                    columns.add("Nom seccio");
                    rows = CtrlInterficie.consultarTematiquesSeccio(IntroduccioDades.getText());
                    break;
                case "Llibres seccio" :
                    columns.add("Titol");
                    columns.add("Tematica");
                    columns.add("Autor");
                    columns.add("Editorial");
                    columns.add("Titol");
                    columns.add("Any");
                    columns.add("Edicio");
                    rows = CtrlInterficie.consultarLlibresSeccio(IntroduccioDades.getText());
                    break; 
            }
            myData.setColumnsValues(columns);
            myData.setRowsValues(rows);
            JTable tablaSeccions = new JTable((TableModel) myData);
            MostraResult.setViewportView(tablaSeccions);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } 
    }
    
    private void consultaTematica(String funcio) {
        try {
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            myData.setColumnsValues(columns);
            ArrayList<ArrayList<String> > rows = null;
            switch(funcio) {
                case "Totes tematiques":
                    columns.add("Nom tematica");
                    columns.add("Nom seccio");
                    rows = CtrlInterficie.seleccionaAllTematiques();
                    break;
                case "Llibres tematiques":
                    columns.add("Titol");
                    columns.add("Tematica");
                    columns.add("Autor");
                    columns.add("Editorial");
                    columns.add("Titol");
                    columns.add("Any");
                    columns.add("Edicio");
                    break;
            }
            myData.setColumnsValues(columns);
            myData.setRowsValues(rows);
            JTable tablaTematiques = new JTable((TableModel) myData);
            MostraResult.setViewportView(tablaTematiques);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    public class MyRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
            System.out.println("hey");
            Component cell = super.getTableCellRendererComponent(table, value,isSelected, hasFocus, row, column);
            if (isSelected) {
                cell.setBackground(Color.GREEN);
                //System.out.println(table.getValueAt(row,column));
            }
            table.repaint();
            System.out.println("ei");
            return cell;
        }
    }
    
    private void consultaLlibre(String funcio) {
      try {
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            columns.add("ISBN");
            columns.add("Titol");
            columns.add("Autor");
            columns.add("Editorial");
            columns.add("Any");
            columns.add("Edicio");
            columns.add("Tematica");
            myData.setColumnsValues(columns);
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcio) {
                case "Tots els llibres":
                    rows = CtrlInterficie.seleccionaAllLlibres();
                    break;
                case "Consulta per títol":
                    System.out.println(IntroduccioDades.getText());
                    rows = CtrlDominiInterficie.consultaLlibresAutor(IntroduccioDades.getText());
                    break;
                case "Consulta per tematica principal":
                    rows = CtrlDominiInterficie.consultaLlibresTematica(Integer.parseInt(IntroduccioDades.getText()));
                    break;
                case "Consulta per autor":
                    rows = CtrlDominiInterficie.consultaLlibresAutor(IntroduccioDades.getText());
                    break;
                case "Consulta per isbn":
                    rows = CtrlDominiInterficie.consultaLlibrePerISBN(IntroduccioDades.getText());
                    break;
                case "Consulta per any":
                    rows = CtrlDominiInterficie.consultaLlibresAny(Integer.parseInt(IntroduccioDades.getText()));
                    break;
                case "Consulta per editorial":
                    rows = CtrlDominiInterficie.consultaLlibresEditorial(IntroduccioDades.getText());
                    break;
            }
            System.out.println(rows.size());
            myData.setRowsValues(rows);
            
            final JTable tablaLlibres = new JTable((TableModel) myData);
            tablaLlibres.getSelectedColumn();
            tablaLlibres.getSelectedRow();
            //System.out.println(tablaLlibres.getValueAt(tablaLlibres.getSelectedRow(), tablaLlibres.getSelectedColumn()));
            System.out.println("hola");
            System.out.println("hola");
            //MyRenderer r = new MyRenderer();
            tablaLlibres.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                  JTable target = (JTable)e.getSource();
                  int row = target.getSelectedRow();
                  int column = target.getSelectedColumn();
                  System.out.println(tablaLlibres.getValueAt(tablaLlibres.getSelectedRow(), tablaLlibres.getSelectedColumn()));
                  // do some action if appropriate column
                }
              }
            });
            MostraResult.setViewportView(tablaLlibres);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
    }
    
    private void consultaEstanteria(String funcio) {
        try {
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            myData.setColumnsValues(columns);
            ArrayList<ArrayList<String> > rows = null;
            System.out.println("Consulta Estanteria");
            switch(funcio) {
                case "Totes estanteries":
                    columns.add("ID Estanteria");
                    rows = CtrlInterficie.seleccionaAllEstanteries();
                    break;
                case "Llibres estanteria":
                    columns.add("Titol");
                    columns.add("Tematica");
                    columns.add("Autor");
                    columns.add("Editorial");
                    columns.add("Titol");
                    columns.add("Any");
                    columns.add("Edicio");
                    break;
                case "Localitzacio estanteria":
                    columns.add("x");
                    columns.add("y");
                    break;
                case "Mida estanteria":
                    columns.add("Mida estanteria");
                    break;
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    private boolean haIntroduitDades() {
        String s = IntroduccioDades.getText();
        return (!s.equals("Introdueix nom area")&& !s.equals("Introdueix nom seccio")
                &&!s.equals("Introdueix nom tematica")&& !s.equals("Introduiex titol")
                && !s.equals("Introdueix autor")&& !s.equals("Introdueix isbn")
                && !s.equals("Introdueix nom editorial") && !s.equals("Introdueix any"));
    }
    
    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // TODO add your handling code here:
        try {
            System.out.println("Consulta...");
            String SeleccioItem = (String) Seleccio.getModel()
                .getSelectedItem();
            String funcionsSeleccioItem = (String) funcionsSeleccio.getModel()
                .getSelectedItem();
            if (haIntroduitDades()) { // TODO
                switch (SeleccioItem) {
                    case "Area":
                    consultaArea(funcionsSeleccioItem);
                    break;
                    case "Seccio":
                    consultaSeccio(funcionsSeleccioItem);
                    break;
                    case "Tematica":
                    consultaTematica(funcionsSeleccioItem);
                    break;
                    case "Llibre":
                    consultaLlibre(funcionsSeleccioItem);
                    break;
                    case "Estanteria":
                    consultaEstanteria(funcionsSeleccioItem);
                    break;
                    default:
                    break;
                }
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_OKButtonActionPerformed

    private void IntroduccioDadesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntroduccioDadesFocusGained
        // TODO add your handling code here:
        IntroduccioDades.setText("");
        IntroduccioDades.setForeground(new java.awt.Color(0,0,0));
    }//GEN-LAST:event_IntroduccioDadesFocusGained

    private void IntroduccioDadesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntroduccioDadesFocusLost
        // TODO add your handling code here:
        if(IntroduccioDades.getText().trim().equals("")) {
            establirValorsIntroccioValors();
            IntroduccioDades.setForeground(new java.awt.Color(153, 153, 153));
        }
    }//GEN-LAST:event_IntroduccioDadesFocusLost

    private void IntroduccioDadesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IntroduccioDadesKeyTyped
        // TODO add your handling code here:
        OKButton.setEnabled(true);
    }//GEN-LAST:event_IntroduccioDadesKeyTyped

    private void establirValorsIntroccioValors() {
        try {
            String SeleccioItem = (String) Seleccio.getModel()
                .getSelectedItem();
            String funcionsSeleccioItem = (String) funcionsSeleccio.getModel()
                .getSelectedItem();
            switch (SeleccioItem) {
                    case "Area": 
                        IntroduccioDades.setText("Introdueix nom area");
                        break;
                    case "Seccio":
                        IntroduccioDades.setText("Introdueix nom seccio");
                        break;
                    case "Tematica":
                        IntroduccioDades.setText("Introdueix nom tematica");
                        break;
                    case "Llibre":
                        switch(funcionsSeleccioItem) {
                            case "Consulta per títol":
                                IntroduccioDades.setText("Introdueix titol");
                                break;
                            case "Consulta per autor":
                                IntroduccioDades.setText("Introdueix autor");
                                break;
                            case "Consulta per tematica principal":
                                IntroduccioDades.setText("Introdueix nom tematatica");
                                break;
                            case "Consulta per isbn":
                                IntroduccioDades.setText("Introdueix isbn");
                                break;
                            case "Consulta per editorial":
                                IntroduccioDades.setText("Introdueix nom editorial");
                                break;
                            case "Consulta per any":
                                IntroduccioDades.setText("Introdueix any");
                                break;
                        }
                        break;
                }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void restablirOpcions() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta..."}));
    }
    private void opcionsArea() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes arees", "Seccions d'area", "Tematiques d'area", "Llibres d'area"}));
    }
    private void opcionsSeccio() {
    funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes seccions", "Tematiques seccio", "Llibres seccio" }));
    }
    private void opcionsTematica() {
    funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes tematiques", "Llibres tematiques" }));
    }
    private void opcionsLlibre() {
    funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta..." , "Tots els llibres", "Consulta per títol",
                                                                                        "Consulta per autor", "Consulta per tematica principal", "Consulta per isbn",
                                                                                        "Consulta per any", "Consulta per editorial"}));
        
    }
    private void opcionsEstanteria() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta...", "Totes estanteries", "Llibres estanteria", "Localitzacio estanteria", "Mida estanteria",}));
    }    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fons;
    private javax.swing.JPanel Header;
    private javax.swing.JTextField IntroduccioDades;
    private javax.swing.JScrollPane MostraResult;
    private javax.swing.JButton OKButton;
    private javax.swing.JComboBox Seleccio;
    private javax.swing.JComboBox funcionsSeleccio;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
