package propLlibreria.Interficie;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.TableModel;

/**
 *
 * @author Ruben
 */
public class VistaConsultes extends javax.swing.JPanel {

    /**
     * Creates new form VistaConsultes
     */
    @SuppressWarnings("FieldMayBeFinal")
    
    
    public VistaConsultes() {
        initComponents();
        IntroduccioDades.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fons = new javax.swing.JPanel();
        Seleccio = new javax.swing.JComboBox();
        MostraResult = new javax.swing.JScrollPane();
        funcionsSeleccio = new javax.swing.JComboBox();
        OKButton = new javax.swing.JButton();
        IntroduccioDades = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        Fons.setBackground(new java.awt.Color(204, 204, 255));
        Fons.setFont(new java.awt.Font("Arial Unicode MS", 0, 11)); // NOI18N
        Fons.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FonsKeyPressed(evt);
            }
        });

        Seleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona...", "Area", "Seccio", "Tematica", "Llibre", "Estanteria" }));
        Seleccio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccioActionPerformed(evt);
            }
        });

        MostraResult.setAutoscrolls(true);
        MostraResult.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MostraResultKeyPressed(evt);
            }
        });

        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta..." }));
        funcionsSeleccio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionsSeleccioActionPerformed(evt);
            }
        });

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        IntroduccioDades.setForeground(new java.awt.Color(153, 153, 153));
        IntroduccioDades.setEnabled(false);
        IntroduccioDades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntroduccioDadesActionPerformed(evt);
            }
        });
        IntroduccioDades.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                IntroduccioDadesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                IntroduccioDadesFocusLost(evt);
            }
        });
        IntroduccioDades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IntroduccioDadesKeyPressed(evt);
            }
        });

        jButton1.setText("Enrere");
        jButton1.setActionCommand("Enrere");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FonsLayout = new javax.swing.GroupLayout(Fons);
        Fons.setLayout(FonsLayout);
        FonsLayout.setHorizontalGroup(
            FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FonsLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(funcionsSeleccio, 0, 135, Short.MAX_VALUE)
                            .addComponent(Seleccio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IntroduccioDades, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(OKButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FonsLayout.createSequentialGroup()
                        .addGap(0, 13, Short.MAX_VALUE)
                        .addComponent(MostraResult, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(36, Short.MAX_VALUE))))
        );
        FonsLayout.setVerticalGroup(
            FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FonsLayout.createSequentialGroup()
                .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FonsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IntroduccioDades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OKButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FonsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(Seleccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcionsSeleccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(MostraResult, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void FonsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FonsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_FonsKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        VistaPrincipal v = (VistaPrincipal)SwingUtilities.getWindowAncestor(this);
        v.ferVisiblePrincipal();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void IntroduccioDadesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IntroduccioDadesKeyPressed
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        String enter = evt.getKeyText(10);
        if (java.awt.event.KeyEvent.getKeyText(keyCode).equals(enter)){
            Consulta();
        }
    }//GEN-LAST:event_IntroduccioDadesKeyPressed

    private void IntroduccioDadesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntroduccioDadesFocusLost
        // TODO add your handling code here:
        if(IntroduccioDades.getText().trim().equals("")) {
            establirValorsIntroduccioDades();
        }
    }//GEN-LAST:event_IntroduccioDadesFocusLost

    private void IntroduccioDadesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntroduccioDadesFocusGained
        // TODO add your handling code here:
        IntroduccioDades.setText("");
        IntroduccioDades.setForeground(new java.awt.Color(0,0,0));
    }//GEN-LAST:event_IntroduccioDadesFocusGained

    private void IntroduccioDadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntroduccioDadesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IntroduccioDadesActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // TODO add your handling code here:
        Consulta();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void funcionsSeleccioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionsSeleccioActionPerformed
        // TODO add your handling code here:
        String SeleccioItem = (String) Seleccio.getModel()
        .getSelectedItem();
        String funcionsSeleccioItem = (String) funcionsSeleccio.getModel()
        .getSelectedItem();
        System.out.println(funcionsSeleccioItem);
        try {
            //TODO
            if ((SeleccioItem == null) ||("Selecciona...".equals(SeleccioItem))
                || (funcionsSeleccioItem == null) || ("Tipus consulta...".equals(funcionsSeleccioItem))
                || ("Totes arees".equals(funcionsSeleccioItem)) || ("Totes seccions".equals(funcionsSeleccioItem))
                || ("Totes tematiques".equals(funcionsSeleccioItem)) || ("Tots els llibres".equals(funcionsSeleccioItem))
                || ("Totes estanteries".equals(funcionsSeleccioItem)) || ("Consulta ordenacio llibres".equals(funcionsSeleccioItem))) {
                IntroduccioDades.setEnabled(false);
                IntroduccioDades.setText("");
            }
            else {
                IntroduccioDades.setEnabled(true);
                establirValorsIntroduccioDades();
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_funcionsSeleccioActionPerformed

    private void MostraResultKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MostraResultKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_MostraResultKeyPressed

    private void SeleccioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccioActionPerformed
        // TODO add your handling code here:
        String SeleccioItem = (String) Seleccio.getModel()
        .getSelectedItem();
        try {
            switch(SeleccioItem) {
                case "Selecciona...":
                restablirOpcions();
                break;
                case "Area":
                opcionsArea();
                break;
                case "Seccio":
                opcionsSeccio();
                break;
                case "Tematica":
                opcionsTematica();
                break;
                case "Llibre":
                opcionsLlibre();
                break;
                case "Estanteria":
                opcionsEstanteria();
                break;
            }
        }
        catch (Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_SeleccioActionPerformed
    
    private void restablirOpcions() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta..."}));
    }
    private void opcionsArea() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes arees", "Seccions d'area",
                                                                                        "Tematiques d'area", "Llibres d'area"}));
    }
    private void opcionsSeccio() {
    funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes seccions",
                                                                                        "Tematiques seccio", "Llibres seccio" }));
    }
    private void opcionsTematica() {
    funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes tematiques", "Llibres tematiques" }));
    }
    private void opcionsLlibre() {
    funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta..." , "Tots els llibres", "Consulta per títol",
                                                                                        "Consulta per autor", "Consulta per isbn","Consulta per any",
                                                                                        "Consulta per editorial","Consulta ordenacio llibres"}));
        
    }
    private void opcionsEstanteria() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta...", "Totes estanteries", "Llibres estanteria"}));
    }
    
    private PropTableModel setModelTable(ArrayList<String> columns, ArrayList<ArrayList<String> > rows) {
        PropTableModel myData = new PropTableModel();
        myData.setColumnsValues(columns);
        myData.setRowsValues(rows);
        return myData;
    }
    private PropTableModel valorsModelArea() {
        try {
            String funcio = (String)funcionsSeleccio.getModel()
                .getSelectedItem();
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcio) {
                case "Totes arees":
                    columns.add("Nom area");
                    myData.setColumnsValues(columns);
                    rows = CtrlInterficie.seleccionaAllArees();
                    break;
                case "Seccions d'area":
                    columns.add("Nom seccio");
                    columns.add("Nom area");
                    rows = CtrlInterficie.consultarSeccionsArea(IntroduccioDades.getText());    
                    break;
                case "Tematiques d'area":
                    columns.add("Nom tematica");
                    rows = CtrlInterficie.consultarTematiquesArea(IntroduccioDades.getText());
                    break;
                case "Llibres d'area":
                    columns = valorsHeaderLlibre();
                    ArrayList<ArrayList<String> > extendedRows = CtrlInterficie.consultarLlibresArea(IntroduccioDades.getText());
                    rows = valorsReduitsLlibres(extendedRows);
                    break;
            }
            myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No existeix cap area amb nom " + IntroduccioDades.getText(),"Info",JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
    
    private void consultaArea() {
        try {
            System.out.println("Consulta area");
            PropTableModel myData = valorsModelArea();
            JTable taulaArees = new JTable((TableModel) myData);
            MostraResult.setViewportView(taulaArees);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private PropTableModel valorsModelSeccio() {
        try {
            String funcio = (String)funcionsSeleccio.getModel()
                .getSelectedItem();
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcio) {
                case "Totes seccions":
                    columns.add("Nom seccio");
                    columns.add("Nom area");
                    rows = CtrlInterficie.seleccionaAllSeccions();
                    break;
                case "Tematiques seccio" :
                    columns.add("Nom tematica");
                    columns.add("Nom seccio");
                    columns.add("Nom area");
                    rows = CtrlInterficie.consultarTematiquesSeccio(IntroduccioDades.getText());
                    break;
                case "Llibres seccio" :
                    columns = valorsHeaderLlibre();
                    ArrayList<ArrayList<String> > extendedRows = CtrlInterficie.consultarLlibresSeccio(IntroduccioDades.getText());
                    rows = valorsReduitsLlibres(extendedRows);
                    break; 
            }
            myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No existeix cap seccio amb nom" + IntroduccioDades.getText(),"Info",JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
    
    private void consultaSeccio() {
      try {
            String funcio = (String) funcionsSeleccio.getModel()
                .getSelectedItem();
            PropTableModel myData = valorsModelSeccio();
            if (myData != null) {
                JTable tablaSeccions = new JTable((TableModel) myData);
                MostraResult.setViewportView(tablaSeccions);
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } 
    }
    
        private PropTableModel valorsModelTematica() {
        try {
            String funcio = (String)funcionsSeleccio.getModel()
                .getSelectedItem();
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcio) {
                case "Totes tematiques":
                    columns.add("Nom tematica");
                    columns.add("Nom seccio");
                    rows = CtrlInterficie.seleccionaAllTematiques();
                    break;
                case "Llibres tematiques":
                    columns = valorsHeaderLlibre();
                    ArrayList<ArrayList<String> > extendedRows = CtrlInterficie.consultarLlibresTematica(IntroduccioDades.getText());
                    rows = valorsReduitsLlibres(extendedRows);
                    break;
            }
            myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No existeix cap tematica amb nom" + IntroduccioDades.getText(),"Info",JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
        
    private void consultaTematica() {
        try {
            PropTableModel myData = valorsModelTematica();
            if (myData != null) {
                JTable tablaTematiques = new JTable((TableModel) myData);
                MostraResult.setViewportView(tablaTematiques);
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    /*public class MyRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
            System.out.println("hey");
            Component cell = super.getTableCellRendererComponent(table, value,isSelected, hasFocus, row, column);
            if (isSelected) {
                cell.setBackground(Color.GREEN);
                //System.out.println(table.getValueAt(row,column));
            }
            table.repaint();
            System.out.println("ei");
            return cell;
        }
    }*/
    
    private ArrayList<String> valorsHeaderLlibre() {
        ArrayList<String> columns = new ArrayList<String>();
        columns.add("ISBN");
        columns.add("Titol");
        columns.add("Autor");
        columns.add("Any");
        columns.add("Tematica");
        return columns;
    }
    
    private ArrayList<ArrayList<String> > valorsReduitsLlibres(ArrayList<ArrayList<String> > rows) {
        ArrayList<ArrayList<String> > llibres = new ArrayList<ArrayList<String> >();
        for(int i = 0; i < rows.size(); ++i) {
            rows.get(i).remove(5);
            rows.get(i).remove(3);
            llibres.add(rows.get(i));
        }
        return llibres;
    }
    private PropTableModel valorsModelLlibre(boolean inException) {
        try {
            String funcio = (String) funcionsSeleccio.getModel()
                .getSelectedItem();
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = valorsHeaderLlibre();
            
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            if (!inException) {
                switch(funcio) {
                    case "Tots els llibres":
                        rows = CtrlInterficie.seleccionaAllLlibres();
                        break;
                    case "Consulta per títol":
                        System.out.println(IntroduccioDades.getText());
                        rows = CtrlInterficie.consultaLlibresAutor(IntroduccioDades.getText());
                        break;
                    case "Consulta per autor":
                        rows = CtrlInterficie.consultaLlibresAutor(IntroduccioDades.getText());
                        break;
                    case "Consulta per isbn":
                        rows = CtrlInterficie.consultaLlibresPerISBN(IntroduccioDades.getText());
                        break;
                    case "Consulta per any":
                        rows = CtrlInterficie.consultaLlibresAny(Integer.parseInt(IntroduccioDades.getText()));
                        break;
                    case "Consulta per editorial":
                        rows = CtrlInterficie.consultaLlibresEditorial(IntroduccioDades.getText());
                        break;
                    case "Consulta ordenacio llibres":
                        columns.add("Estanteria");
                        rows = CtrlInterficie.consultarOrdenacioBiblio();
                        
                        break;
                }
            }
            ArrayList<ArrayList<String> > reducedRows = new ArrayList<ArrayList<String> >();
            reducedRows = valorsReduitsLlibres(rows);
            myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            return valorsModelLlibre(true);
        }
    }
            
    private void consultaLlibre() {
      try {
            PropTableModel myData = valorsModelLlibre(false);
            final JTable taulaLlibres = new JTable((TableModel) myData);
            if (myData.getRowCount() > 0) {
                //myData.setRowsValues(rows);
                taulaLlibres.getSelectedColumn();
                taulaLlibres.getSelectedRow();
                //System.out.println(tablaLlibres.getValueAt(tablaLlibres.getSelectedRow(), tablaLlibres.getSelectedColumn()));
                //MyRenderer r = new MyRenderer();
                taulaLlibres.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        Object isbn = taulaLlibres.getValueAt(taulaLlibres.getSelectedRow(),0);
                        VistaDadesLlibre dadesLlibre = new VistaDadesLlibre((String) isbn);
                        JFrame frameDadesLlibre = new JFrame();
                        frameDadesLlibre.setSize(new Dimension(600,400));
                        frameDadesLlibre.setResizable(false);
                        frameDadesLlibre.add(dadesLlibre);
                        frameDadesLlibre.setVisible(true);
                    }
                  }
                });
            }
            MostraResult.setViewportView(taulaLlibres);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void consultaEstanteria() {
        try {
            String funcio = (String) funcionsSeleccio.getModel()
                .getSelectedItem();
            PropTableModel myData = new PropTableModel();
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            System.out.println("Consulta Estanteria");
            switch(funcio) {
                case "Totes estanteries":
                    columns.add("Coordenada X");
                    columns.add("Coordenada Y");
                    columns.add("Num Files");
                    columns.add("LLargada");
                    rows = CtrlInterficie.seleccionaAllEstanteries();
                    break;
                case "Llibres estanteria":
                    String dades = IntroduccioDades.getText();
                    String coordenades[] = dades.split(",");
                    if (coordenades.length != 2) throw new Exception("Valors introduits incorrectament");
                    int x = Integer.parseInt(coordenades[0]);
                    int y = Integer.parseInt(coordenades[1]);
                    rows = CtrlInterficie.consultarLlibresEstanteria(x,y);
                    columns = valorsHeaderLlibre();
                    break;
            }
            myData.setRowsValues(rows);
            myData.setColumnsValues(columns);
            JTable taulaEstanteries = new JTable((TableModel) myData);
            MostraResult.setViewportView(taulaEstanteries);
        }
        catch (Exception e) {
            String missatge;
            if (e.getMessage().equals("Valors introduits incorrectament")) missatge = "Recorda que el model per consultar dades es el següent: x,y";
            else missatge = "No existeix cap estanteria amb aquestes coordenades";
            JOptionPane.showMessageDialog(null, missatge,"Info",JOptionPane.INFORMATION_MESSAGE);
            System.out.println(e.getMessage());
        }
    }
    private boolean haIntroduitDades() {
        String s = IntroduccioDades.getText();
        return (!s.equals("Introdueix nom area")&& !s.equals("Introdueix nom seccio")
                &&!s.equals("Introdueix nom tematica")&& !s.equals("Introduiex titol")
                && !s.equals("Introdueix autor")&& !s.equals("Introdueix isbn")
                && !s.equals("Introdueix nom editorial") && !s.equals("Introdueix any"));
    }
    
    private void Consulta() {
        try {
            System.out.println("Consulta...");
            String SeleccioItem = (String) Seleccio.getModel()
                .getSelectedItem();   
            if (haIntroduitDades()) {
                switch (SeleccioItem) {
                    case "Area":
                    consultaArea();
                    break;
                    case "Seccio":
                    consultaSeccio();
                    break;
                    case "Tematica":
                    consultaTematica();
                    break;
                    case "Llibre":
                    consultaLlibre();
                    break;
                    case "Estanteria":
                    consultaEstanteria();
                    break;
                }
            }
            System.out.println("Termino consulta");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void establicValorsIntroduccioDadesLlibre(String funcionsSeleccioItem) {
        try {
            switch(funcionsSeleccioItem) {
                case "Consulta per títol":
                    IntroduccioDades.setText("Introdueix titol");
                    break;
                case "Consulta per autor":
                    IntroduccioDades.setText("Introdueix autor");
                    break;
                case "Consulta per tematica principal":
                    IntroduccioDades.setText("Introdueix nom tematatica");
                    break;
                case "Consulta per isbn":
                    IntroduccioDades.setText("Introdueix isbn");
                    break;
                case "Consulta per editorial":
                    IntroduccioDades.setText("Introdueix nom editorial");
                    break;
                case "Consulta per any":
                    IntroduccioDades.setText("Introdueix any");
                    break;
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    private void establirValorsIntroduccioDades() {
        try {
            String SeleccioItem = (String) Seleccio.getModel()
                .getSelectedItem();
            String funcionsSeleccioItem = (String) funcionsSeleccio.getModel()
                .getSelectedItem();
            switch (SeleccioItem) {
                    case "Area": 
                        IntroduccioDades.setText("Introdueix nom area");
                        break;
                    case "Seccio":
                        IntroduccioDades.setText("Introdueix nom seccio");
                        break;
                    case "Tematica":
                        IntroduccioDades.setText("Introdueix nom tematica");
                        break;
                    case "Llibre":
                        establicValorsIntroduccioDadesLlibre(funcionsSeleccioItem);
                        break;
                }
            IntroduccioDades.setForeground(new java.awt.Color(153, 153, 153));
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fons;
    private javax.swing.JTextField IntroduccioDades;
    private javax.swing.JScrollPane MostraResult;
    private javax.swing.JButton OKButton;
    private javax.swing.JComboBox Seleccio;
    private javax.swing.JComboBox funcionsSeleccio;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
