package propLlibreria.Interficie;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Ruben
 */


public class VistaConsultes extends javax.swing.JPanel {
    /**
     * Creates new form VistaConsultes
     */
    @SuppressWarnings("FieldMayBeFinal")
    boolean tipusLlibre = false;
    String funcionsSeleccioItem;
    String SeleccioItem;
    public VistaConsultes() {
        initComponents();
        resetFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fons = new javax.swing.JPanel();
        Seleccio = new javax.swing.JComboBox();
        MostraResult = new javax.swing.JScrollPane();
        funcionsSeleccio = new javax.swing.JComboBox();
        OKButton = new javax.swing.JButton();
        IntroduccioDades = new javax.swing.JTextField();
        BotoEnrere = new javax.swing.JButton();

        Fons.setBackground(new java.awt.Color(204, 204, 255));
        Fons.setFont(new java.awt.Font("Arial Unicode MS", 0, 11)); // NOI18N

        Seleccio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccioActionPerformed(evt);
            }
        });

        MostraResult.setAutoscrolls(true);

        funcionsSeleccio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionsSeleccioActionPerformed(evt);
            }
        });

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        IntroduccioDades.setForeground(new java.awt.Color(153, 153, 153));
        IntroduccioDades.setEnabled(false);
        IntroduccioDades.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                IntroduccioDadesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                IntroduccioDadesFocusLost(evt);
            }
        });
        IntroduccioDades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IntroduccioDadesKeyPressed(evt);
            }
        });

        BotoEnrere.setText("Enrere");
        BotoEnrere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotoEnrereActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FonsLayout = new javax.swing.GroupLayout(Fons);
        Fons.setLayout(FonsLayout);
        FonsLayout.setHorizontalGroup(
            FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BotoEnrere)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(funcionsSeleccio, 0, 147, Short.MAX_VALUE)
                    .addComponent(Seleccio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntroduccioDades, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FonsLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(MostraResult, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        FonsLayout.setVerticalGroup(
            FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FonsLayout.createSequentialGroup()
                .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FonsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IntroduccioDades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OKButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FonsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(FonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BotoEnrere)
                            .addComponent(Seleccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcionsSeleccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MostraResult, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void resetFields() {
        Seleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona...", "Area", "Seccio", "Tematica", "Llibre", "Estanteria" }));
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta..." }));
        MostraResult.setViewportView(new JViewport());
        IntroduccioDades.setEnabled(false);
        IntroduccioDades.setText("");
    }
    
    private void getComboBoxItems() {
        SeleccioItem = (String) Seleccio.getModel()
                .getSelectedItem();
        funcionsSeleccioItem = (String) funcionsSeleccio.getModel()
                .getSelectedItem(); 
    }
    
    private void BotoEnrereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotoEnrereActionPerformed
        resetFields();
        VistaPrincipal v = (VistaPrincipal)SwingUtilities.getWindowAncestor(this);
        v.ferVisiblePrincipal();
    }//GEN-LAST:event_BotoEnrereActionPerformed

    private void IntroduccioDadesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IntroduccioDadesKeyPressed
        int keyCode = evt.getKeyCode();
        String enter = KeyEvent.getKeyText(10);
        if (java.awt.event.KeyEvent.getKeyText(keyCode).equals(enter)){
            Consulta();
        }
    }//GEN-LAST:event_IntroduccioDadesKeyPressed

        private void establirValorsIntroduccioDadesLlibre() {
        try {
            switch(funcionsSeleccioItem) {
                case "Consulta per t√≠tol":
                    IntroduccioDades.setText("Introdueix titol");
                    break;
                case "Consulta per autor":
                    IntroduccioDades.setText("Introdueix autor");
                    break;
                case "Consulta per tematica principal":
                    IntroduccioDades.setText("Introdueix nom tematica");
                    break;
                case "Consulta per isbn":
                    IntroduccioDades.setText("Introdueix isbn");
                    break;
                case "Consulta per editorial":
                    IntroduccioDades.setText("Introdueix nom editorial");
                    break;
                case "Consulta per any":
                    IntroduccioDades.setText("Introdueix any");
                    break;
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    private void establirValorsIntroduccioDades() {
        try {
            switch (SeleccioItem) {
                    case "Area": 
                        IntroduccioDades.setText("Introdueix nom area");
                        break;
                    case "Seccio":
                        IntroduccioDades.setText("Introdueix nom seccio");
                        break;
                    case "Tematica":
                        IntroduccioDades.setText("Introdueix nom tematica");
                        break;
                    case "Llibre":
                        establirValorsIntroduccioDadesLlibre();
                        break;
                }
            IntroduccioDades.setForeground(new java.awt.Color(153, 153, 153));
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void IntroduccioDadesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntroduccioDadesFocusLost
        if(IntroduccioDades.getText().trim().equals("")) {
            getComboBoxItems();
            establirValorsIntroduccioDades();
        }
    }//GEN-LAST:event_IntroduccioDadesFocusLost

    private void IntroduccioDadesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IntroduccioDadesFocusGained
        IntroduccioDades.setText("");
        IntroduccioDades.setForeground(new java.awt.Color(0,0,0));
    }//GEN-LAST:event_IntroduccioDadesFocusGained

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // TODO add your handling code here:
        Consulta();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void funcionsSeleccioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionsSeleccioActionPerformed
        // TODO add your handling code here:
        getComboBoxItems();
        try {
            //TODO
            if ((SeleccioItem == null) ||("Selecciona...".equals(SeleccioItem))
                || (funcionsSeleccioItem == null) || ("Tipus consulta...".equals(funcionsSeleccioItem))
                || ("Totes arees".equals(funcionsSeleccioItem)) || ("Totes seccions".equals(funcionsSeleccioItem))
                || ("Totes tematiques".equals(funcionsSeleccioItem)) || ("Tots els llibres".equals(funcionsSeleccioItem))
                || ("Totes estanteries".equals(funcionsSeleccioItem)) || ("Consulta ordenacio".equals(funcionsSeleccioItem))) {
                IntroduccioDades.setEnabled(false);
                IntroduccioDades.setText("");
            }
            else {
                IntroduccioDades.setEnabled(true);
                establirValorsIntroduccioDades();
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_funcionsSeleccioActionPerformed

    private void setOpcionsSeleccio(String Seleccio) {
        try {
            switch(Seleccio) {
                    case "Selecciona...":
                    restablirOpcions();
                    break;
                    case "Area":
                    opcionsArea();
                    break;
                    case "Seccio":
                    opcionsSeccio();
                    break;
                    case "Tematica":
                    opcionsTematica();
                    break;
                    case "Llibre":
                    opcionsLlibre();
                    break;
                    case "Estanteria":
                    opcionsEstanteria();
                    break;
                }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    private void SeleccioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccioActionPerformed
        // TODO add your handling code here:
        getComboBoxItems();
        try {
            setOpcionsSeleccio(SeleccioItem);
        }
        catch (Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_SeleccioActionPerformed
    
    private void restablirOpcions() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta..."}));
    }
    private void opcionsArea() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes arees", "Seccions d'area",
                                                                                        "Tematiques d'area", "Llibres d'area"}));
    }
    private void opcionsSeccio() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes seccions",
                                                                                        "Tematiques seccio", "Llibres seccio" }));
    }
    private void opcionsTematica() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipus consulta...", "Totes tematiques", "Llibres tematiques" }));
    }
    private void opcionsLlibre() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta..." , "Tots els llibres", "Consulta per t√≠tol",
                                                                                        "Consulta per autor", "Consulta per isbn","Consulta per any",
                                                                                        "Consulta per editorial","Consulta ordenacio"}));
    }
    private void opcionsEstanteria() {
        funcionsSeleccio.removeAllItems();
        funcionsSeleccio.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Tipus consulta...", "Totes estanteries", "Llibres estanteria"}));
    }
    
    private PropTableModel setModelTable(ArrayList<String> columns, ArrayList<ArrayList<String> > rows) {
        PropTableModel myData = new PropTableModel();
        myData.setColumnsValues(columns);
        myData.setRowsValues(rows);
        return myData;
    }
    
    private PropTableModel valorsModelArea() {
        try {
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcionsSeleccioItem) {
                case "Totes arees":
                    columns.add("Nom area");
                    rows = CtrlInterficie.seleccionaAllArees();
                    break;
                case "Seccions d'area":
                    columns.add("Nom seccio");
                    columns.add("Nom area");
                    rows = CtrlInterficie.consultarSeccionsArea(IntroduccioDades.getText());    
                    break;
                case "Tematiques d'area":
                    columns.add("Nom tematica");
                    rows = CtrlInterficie.consultarTematiquesArea(IntroduccioDades.getText());
                    break;
                case "Llibres d'area":
                    columns = valorsHeaderLlibre();
                    rows = CtrlInterficie.consultarLlibresArea(IntroduccioDades.getText());
                    valorsReduitsLlibres(rows);
                    tipusLlibre = true;
                    break;
            }
            PropTableModel myData  = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No existeix cap area amb nom " + IntroduccioDades.getText(),"Info",JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
    
    private void consultaArea() {
        try {
            System.out.println("Consulta area");
            PropTableModel myData = valorsModelArea();
            if (myData != null) {
                JTable taulaArees = setTaula(myData);
                if (tipusLlibre) {
                    addMouseActionToTaula(taulaArees);
                    tipusLlibre = false;
                }
                MostraResult.setViewportView(taulaArees);
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private PropTableModel valorsModelSeccio() {
        try {
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcionsSeleccioItem) {
                case "Totes seccions":
                    columns.add("Nom seccio");
                    columns.add("Nom area");
                    rows = CtrlInterficie.seleccionaAllSeccions();
                    break;
                case "Tematiques seccio" :
                    columns.add("Nom tematica");
                    columns.add("Nom seccio");
                    columns.add("Nom area");
                    rows = CtrlInterficie.consultarTematiquesSeccio(IntroduccioDades.getText());
                    break;
                case "Llibres seccio" :
                    columns = valorsHeaderLlibre();
                    rows = CtrlInterficie.consultarLlibresSeccio(IntroduccioDades.getText());
                    valorsReduitsLlibres(rows);
                    tipusLlibre = true;
                    break; 
            }
            PropTableModel myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No existeix cap seccio amb nom" + IntroduccioDades.getText(),"Info",JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
    
    private void consultaSeccio() {
      try {
            PropTableModel myData = valorsModelSeccio();
            if (myData != null) {
                JTable taulaSeccions = setTaula(myData);
                if (tipusLlibre) {
                    addMouseActionToTaula(taulaSeccions);
                    tipusLlibre = false;
                }
                MostraResult.setViewportView(taulaSeccions);
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } 
    }
    
        private PropTableModel valorsModelTematica() {
        try {
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcionsSeleccioItem) {
                case "Totes tematiques":
                    columns.add("Nom tematica");
                    columns.add("Nom seccio");
                    rows = CtrlInterficie.seleccionaAllTematiques();
                    break;
                case "Llibres tematiques":
                    columns = valorsHeaderLlibre();
                    rows = CtrlInterficie.consultarLlibresTematica(IntroduccioDades.getText());
                    valorsReduitsLlibres(rows);
                    tipusLlibre = true;
                    break;
            }
            PropTableModel myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No existeix cap tematica amb nom " + IntroduccioDades.getText(),"Info",JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }
        
    private void consultaTematica() {
        try {
            PropTableModel myData = valorsModelTematica();
            if (myData != null) {
                JTable taulaTematiques = setTaula(myData);
                if (tipusLlibre){
                    addMouseActionToTaula(taulaTematiques);
                    tipusLlibre = false;
                }
                MostraResult.setViewportView(taulaTematiques);
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    
    private ArrayList<String> valorsHeaderLlibre() {
        ArrayList<String> columns = new ArrayList<String>();
        columns.add("ISBN");
        columns.add("Titol");
        columns.add("Autor");
        columns.add("Any");
        columns.add("Tematica");
        return columns;
    }
    
    private void valorsReduitsLlibres(ArrayList<ArrayList<String> > rows) {
        for(int i = 0; i < rows.size(); ++i) {
            rows.get(i).remove(5);
            rows.get(i).remove(3);
        }
    }
    private PropTableModel valorsModelLlibre(boolean inException) {
        try {
            boolean casOrdenacio = false;
            ArrayList<String> columns = valorsHeaderLlibre();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            if (!inException) {
                switch(funcionsSeleccioItem) {
                    case "Tots els llibres":
                        rows = CtrlInterficie.seleccionaAllLlibres();
                        break;
                    case "Consulta per t√≠tol":
                        rows = CtrlInterficie.consultaLlibresTitol(IntroduccioDades.getText());
                        break;
                    case "Consulta per autor":
                        rows = CtrlInterficie.consultaLlibresAutor(IntroduccioDades.getText());
                        break;
                    case "Consulta per isbn":
                        rows = CtrlInterficie.consultaLlibresPerISBN(IntroduccioDades.getText());
                        break;
                    case "Consulta per any":
                        rows = CtrlInterficie.consultaLlibresAny(Integer.parseInt(IntroduccioDades.getText()));
                        break;
                    case "Consulta per editorial":
                        rows = CtrlInterficie.consultaLlibresEditorial(IntroduccioDades.getText());
                        break;
                    case "Consulta ordenacio":
                        casOrdenacio = true;
                        columns.remove(0);
                        columns.add(0,"Estanteria");
                        columns.add(1,"ISBN");
                        rows = CtrlInterficie.consultarOrdenacioBiblioTotal();
                        for (int i = 0; i < rows.size(); ++i) {
                            String estanteria = rows.get(i).get(7);
                            rows.get(i).remove(7);
                            rows.get(i).remove(5);
                            rows.get(i).remove(3);
                            rows.get(i).add(0,estanteria);
                        }
                        break;
                }
            }
            if (!casOrdenacio) valorsReduitsLlibres(rows);
            PropTableModel myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            return valorsModelLlibre(true);
        }
    }
    
    private void setMouseEventVistaDadesLlibre(MouseEvent e) {
        if (e.getClickCount() == 2) {
            JViewport viewport = MostraResult.getViewport(); 
            JTable taulaLlibres = (JTable)viewport.getView();
            Object isbn = taulaLlibres.getValueAt(taulaLlibres.getSelectedRow(),0);
            VistaDadesLlibre dadesLlibre = new VistaDadesLlibre((String) isbn);
            JFrame frameDadesLlibre = new JFrame();
            frameDadesLlibre.setSize(new Dimension(600,400));
            frameDadesLlibre.setResizable(false);
            frameDadesLlibre.add(dadesLlibre);
            frameDadesLlibre.setVisible(true);
        }
    }
    private void setMouseEventVistaDades(MouseEvent e) {
        if (e.getClickCount() == 3) {
            JViewport viewport = MostraResult.getViewport(); 
            JTable taulaLlibres = (JTable)viewport.getView();
            Integer rowSelected = taulaLlibres.getSelectedRow();
            Integer columnSelected = taulaLlibres.getSelectedColumn();
            String Item = (String) taulaLlibres.getValueAt(rowSelected,columnSelected);
            IntroduccioDades.setEnabled(true);
            IntroduccioDades.setText(Item);
            setOpcionsSeleccio(taulaLlibres.getColumnName(columnSelected));
        }
    }
    
    private void addMouseActionToTaula(JTable taula) {
        if (tipusLlibre) {
            taula.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    setMouseEventVistaDadesLlibre(e);
                }
            });
        }
        else {
            taula.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    setMouseEventVistaDades(e);
                }
            });
        }
    }
    private JTable setTaula(PropTableModel myData) {
        JTable taula = new JTable((TableModel) myData);
        RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(myData);
        taula.setRowSorter(sorter);
        return taula;
    }
    
    private void consultaLlibre() {
        try {
            
            PropTableModel myData = valorsModelLlibre(false);
            final JTable taulaLlibres = setTaula(myData);
            tipusLlibre = true;
            addMouseActionToTaula(taulaLlibres);
            tipusLlibre = false;
            MostraResult.setViewportView(taulaLlibres);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private PropTableModel valorsModelEstanteria() {
        try {
            ArrayList<String> columns = new ArrayList<String>();
            ArrayList<ArrayList<String> > rows = new ArrayList<ArrayList<String> >();
            switch(funcionsSeleccioItem) {
                case "Totes estanteries":
                    columns.add("Coordenada X");
                    columns.add("Coordenada Y");
                    columns.add("Num Files");
                    columns.add("Llargada");
                    rows = CtrlInterficie.seleccionaAllEstanteries();
                    break;
                case "Llibres estanteria":
                    String dades = IntroduccioDades.getText();
                    String coordenades[] = dades.split(",");
                    if (coordenades.length != 2) throw new Exception("Valors introduits incorrectament");
                    int x = Integer.parseInt(coordenades[0]);
                    int y = Integer.parseInt(coordenades[1]);
                    rows = CtrlInterficie.consultarLlibresEstanteria(x,y);
                    columns = valorsHeaderLlibre();
                    break;
            }
            PropTableModel myData = setModelTable(columns,rows);
            return myData;
        }
        catch (Exception e) {
            String missatge;
            if (e.getMessage().equals("Valors introduits incorrectament")) missatge = "Recorda que el model per consultar dades es el seg√ºent: x,y";
            else missatge = "No existeix cap estanteria amb aquestes coordenades";
            JOptionPane.showMessageDialog(null, missatge,"Info",JOptionPane.INFORMATION_MESSAGE);
            System.out.println(e.getMessage());
            return null;
        }
    }
    
    private void consultaEstanteria() {
        try {
            PropTableModel myData = valorsModelEstanteria();
            JTable taulaEstanteries = setTaula(myData);
            addMouseActionToTaula(taulaEstanteries);
            MostraResult.setViewportView(taulaEstanteries);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    private boolean haIntroduitDades() {
        String s = IntroduccioDades.getText();
        return (!s.equals("Introdueix nom area")&& !s.equals("Introdueix nom seccio")
                &&!s.equals("Introdueix nom tematica")&& !s.equals("Introduiex titol")
                && !s.equals("Introdueix autor")&& !s.equals("Introdueix isbn")
                && !s.equals("Introdueix nom editorial") && !s.equals("Introdueix any"));
    }
    
    private void Consulta() {
        try {
            System.out.println("Consulta...");
            getComboBoxItems();
            if (haIntroduitDades()) {
                switch (SeleccioItem) {
                    case "Area":
                    consultaArea();
                    break;
                    case "Seccio":
                    consultaSeccio();
                    break;
                    case "Tematica":
                    consultaTematica();
                    break;
                    case "Llibre":
                    consultaLlibre();
                    break;
                    case "Estanteria":
                    consultaEstanteria();
                    break;
                }
            }
            System.out.println("Termino consulta");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotoEnrere;
    private javax.swing.JPanel Fons;
    private javax.swing.JTextField IntroduccioDades;
    private javax.swing.JScrollPane MostraResult;
    private javax.swing.JButton OKButton;
    private javax.swing.JComboBox Seleccio;
    private javax.swing.JComboBox funcionsSeleccio;
    // End of variables declaration//GEN-END:variables
}
